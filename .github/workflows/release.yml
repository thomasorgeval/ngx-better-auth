name: Release
on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-beta.*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse version and determine release type
        id: version_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # D√©termine si c'est une version beta ou latest
          if [[ $TAG_NAME == *"-beta"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=Beta" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=Latest" >> $GITHUB_OUTPUT
          fi
          
          # Extrait la version de base (sans suffixe beta)
          BASE_VERSION=$(echo $TAG_NAME | sed 's/-beta.*//')
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT

      - name: Get previous release tag
        id: previous_tag
        run: |
          set -e
          
          # Pour les versions latest, trouve la pr√©c√©dente version latest
          # Pour les versions beta, trouve la pr√©c√©dente version (beta ou latest)
          if [[ "${{ steps.version_info.outputs.is_prerelease }}" == "false" ]]; then
            # Pour latest : cherche la derni√®re version non-beta
            PREVIOUS_TAG=$(git tag -l "v*.*.*" | grep -v beta | sort -V | tail -n 2 | head -n 1 || echo "")
          else
            # Pour beta : cherche le dernier tag (peu importe le type)
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          fi
          
          # V√©rifie que le tag existe vraiment
          if [ ! -z "$PREVIOUS_TAG" ] && ! git rev-parse "$PREVIOUS_TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Warning: Previous tag $PREVIOUS_TAG not found, using initial commit instead"
            PREVIOUS_TAG=""
          fi
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "Aucun tag pr√©c√©dent trouv√© - premi√®re release"
          else
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "Tag pr√©c√©dent trouv√©: $PREVIOUS_TAG"
          fi

      - name: Generate changelog
        id: changelog
        run: |
          set -e
          
          TAG_NAME="${{ steps.version_info.outputs.tag_name }}"
          PREVIOUS_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          IS_PRERELEASE="${{ steps.version_info.outputs.is_prerelease }}"
          
          echo "üîç Debug: TAG_NAME=$TAG_NAME, PREVIOUS_TAG=$PREVIOUS_TAG, IS_PRERELEASE=$IS_PRERELEASE"
          
          # Initialise le changelog
          echo "# üöÄ Release $TAG_NAME" > changelog.md
          echo "" >> changelog.md
          
          # Ajoute des badges selon le type de release
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            echo "![Beta](https://img.shields.io/badge/Release-Beta-orange) " >> changelog.md
          else
            echo "![Latest](https://img.shields.io/badge/Release-Latest-green) " >> changelog.md
          fi
          
          echo "" >> changelog.md
          
          # G√©n√®re le changelog bas√© sur les commits
          echo "## üìã What's Changed" >> changelog.md
          echo "" >> changelog.md
          
          if [ ! -z "$PREVIOUS_TAG" ]; then
            echo "üîç Getting commits between $PREVIOUS_TAG and $TAG_NAME..."
          
            # R√©cup√®re les commits avec auteur, en excluant les commits de release
            COMMITS_FOUND=false
            git log --pretty=format:"%s|%an" --no-merges ${PREVIOUS_TAG}..HEAD | \
              grep -v "^chore: release\|^release:\|^bump version\|^version bump" | \
              while IFS='|' read -r commit author; do
                # √âvite les lignes vides
                if [ ! -z "$commit" ]; then
                  COMMITS_FOUND=true
                  # Cat√©gorise les commits selon leur pr√©fixe
                  if [[ $commit == feat* ]] || [[ $commit == feature* ]]; then
                    echo "* ‚ú® $commit by @$author" >> changelog.md
                  elif [[ $commit == fix* ]]; then
                    echo "* üêõ $commit by @$author" >> changelog.md
                  elif [[ $commit == docs* ]]; then
                    echo "* üìö $commit by @$author" >> changelog.md
                  elif [[ $commit == style* ]]; then
                    echo "* üíÑ $commit by @$author" >> changelog.md
                  elif [[ $commit == refactor* ]]; then
                    echo "* ‚ôªÔ∏è $commit by @$author" >> changelog.md
                  elif [[ $commit == perf* ]]; then
                    echo "* ‚ö° $commit by @$author" >> changelog.md
                  elif [[ $commit == test* ]]; then
                    echo "* üß™ $commit by @$author" >> changelog.md
                  elif [[ $commit == chore* ]]; then
                    echo "* üîß $commit by @$author" >> changelog.md
                  elif [[ $commit == ci* ]]; then
                    echo "* üë∑ $commit by @$author" >> changelog.md
                  elif [[ $commit == build* ]]; then
                    echo "* üèóÔ∏è $commit by @$author" >> changelog.md
                  elif [[ $commit == revert* ]]; then
                    echo "* ‚è™ $commit by @$author" >> changelog.md
                  else
                    echo "* üìù $commit by @$author" >> changelog.md
                  fi
                fi
              done
          
            # Si aucun commit trouv√©, ajoute un message par d√©faut
            if ! git log --oneline --no-merges ${PREVIOUS_TAG}..HEAD | grep -v "chore: release\|release:\|bump version\|version bump" | head -1 >/dev/null 2>&1; then
              echo "* üîß Version maintenance and updates" >> changelog.md
            fi
          else
            echo "* üéâ Initial release" >> changelog.md
          fi
          
          echo "" >> changelog.md
          
          # Ajoute des m√©triques (version simplifi√©e et s√©curis√©e)
          echo "## üìä Release Stats" >> changelog.md
          echo "" >> changelog.md
          
          if [ ! -z "$PREVIOUS_TAG" ]; then
            # Compte les commits en excluant ceux de release
            COMMIT_COUNT=$(git log --oneline --no-merges ${PREVIOUS_TAG}..HEAD 2>/dev/null | \
              grep -v "chore: release\|release:\|bump version\|version bump" | wc -l || echo "0")
            echo "* üì¶ **$COMMIT_COUNT commits** since $PREVIOUS_TAG" >> changelog.md
          fi
          
          TOTAL_COMMITS=$(git rev-list --count HEAD 2>/dev/null || echo "unknown")
          echo "* üî¢ **$TOTAL_COMMITS total commits**" >> changelog.md
          
          # Version simplifi√©e pour les contributeurs
          echo "" >> changelog.md
          echo "## üë®‚Äçüíª Contributors" >> changelog.md
          echo "" >> changelog.md
          
          if [ ! -z "$PREVIOUS_TAG" ]; then
            git shortlog -sn ${PREVIOUS_TAG}..HEAD 2>/dev/null | \
              head -10 | \
              while read count author; do
                if [ ! -z "$author" ]; then
                  if [ "$count" -eq 1 ]; then
                    echo "* üôè **$author** ($count commit)" >> changelog.md
                  else
                    echo "* üôè **$author** ($count commits)" >> changelog.md
                  fi
                fi
              done || echo "* üôè Contributors information unavailable" >> changelog.md
          else
            git shortlog -sn 2>/dev/null | \
              head -5 | \
              while read count author; do
                if [ ! -z "$author" ]; then
                  echo "* üôè **$author** ($count commits)" >> changelog.md
                fi
              done || echo "* üôè Contributors information unavailable" >> changelog.md
          fi
          
          echo "" >> changelog.md
          
          # Ajoute un lien vers la comparaison compl√®te
          if [ ! -z "$PREVIOUS_TAG" ]; then
            echo "## üîó Full Changelog" >> changelog.md
            echo "" >> changelog.md
            echo "**[View full diff](${{ github.server_url }}/${{ github.repository }}/compare/${PREVIOUS_TAG}...${TAG_NAME})**" >> changelog.md
            echo "" >> changelog.md
          fi
          
          echo "---" >> changelog.md
          echo "*Generated automatically by GitHub Actions* ü§ñ" >> changelog.md
          
          # Affiche le changelog g√©n√©r√© pour debug
          echo "üìã Changelog g√©n√©r√©:"
          cat changelog.md
          
          # Sauvegarde le changelog pour le step suivant
          {
            echo 'CHANGELOG<<EOF'
            cat changelog.md
            echo EOF
          } >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_info.outputs.tag_name }}
          name: ${{ steps.version_info.outputs.tag_name }}
          body_path: changelog.md
          prerelease: ${{ steps.version_info.outputs.is_prerelease }}
          make_latest: ${{ steps.version_info.outputs.is_prerelease == 'false' }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}